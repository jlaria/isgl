nrun = 30
expert_num_groups = 12
pj = 10
View(results.table)
for(i in 1:3){
latex.tab = paste0('&\\multicolumn{4}{c}{$',i,'$ generating groups ($',i*5,'$ non-zero coefficients)} \\\\ \n',
'& $\\#\\lambda$ & \\ccr & \\beta_err &  \\comptime(sec.)\\\\ \\midrule\n',
'\\iSgL & 2 & ',round(mean(results.table$isgl.ccr[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$isgl.ccr[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun), 2), ')& ',
round(mean(results.table$isgl.beta_err[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$isgl.beta_err[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun),2), ')& ',
round(mean(results.table$isgl.time[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$isgl.time[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun),2), ')\\\\ \n',
'\\iSgL &',expert_num_groups+2,' & ',
round(mean(results.table$uisgl.ccr[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$uisgl.ccr[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun), 2), ')& ',
round(mean(results.table$uisgl.beta_err[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$uisgl.beta_err[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun),2), ')& ',
round(mean(results.table$uisgl.time[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$uisgl.time[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun),2), ')\\\\ \n'
'\\cmidrule{2-5}\n')
cat(latex.tab)
}
for(i in 1:3){
latex.tab = paste0('&\\multicolumn{4}{c}{$',i,'$ generating groups ($',i*5,'$ non-zero coefficients)} \\\\ \n',
'& $\\#\\lambda$ & \\ccr & \\beta_err &  \\comptime(sec.)\\\\ \\midrule\n',
'\\iSgL & 2 & ',round(mean(results.table$isgl.ccr[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$isgl.ccr[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun), 2), ')& ',
round(mean(results.table$isgl.beta_err[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$isgl.beta_err[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun),2), ')& ',
round(mean(results.table$isgl.time[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$isgl.time[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun),2), ')\\\\ \n',
'\\iSgL &',expert_num_groups+2,' & ',
round(mean(results.table$uisgl.ccr[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$uisgl.ccr[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun), 2), ')& ',
round(mean(results.table$uisgl.beta_err[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$uisgl.beta_err[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun),2), ')& ',
round(mean(results.table$uisgl.time[((i-1)*nrun+1):(i*nrun)]),2),
' (',round(sd(results.table$uisgl.time[((i-1)*nrun+1):(i*nrun)])/sqrt(nrun),2), ')\\\\ \n',
'\\cmidrule{2-5}\n')
cat(latex.tab)
}
View(results.table)
nrun = 30
expert_num_groups = 30
pj = 20
train_size = 90
validate_size = 60
test_size = 200
group_index = rep(1:expert_num_groups, each=pj)
results.table = NULL
num_groups = 1
run = 1
true_groups = rep((1:5),num_groups)+rep(pj*(0:(num_groups-1)), each = 5)
# Generate training data
X <- matrix(rnorm(expert_num_groups*pj*train_size), nrow=train_size)
y <- X[, true_groups]%*%rep(1:5, num_groups)
p = exp(y)/(1+exp(y))
y = rbinom(train_size,1, p)
data.train = list(x=X, y=y)
# Generate validate data
X <- matrix(rnorm(expert_num_groups*pj*validate_size), nrow=validate_size)
y <- X[, true_groups]%*%rep(1:5, num_groups)
p = exp(y)/(1+exp(y))
y = rbinom(validate_size,1, p)
data.validate = list(x=X, y=y)
# Generate test data
X <- matrix(rnorm(expert_num_groups*pj*test_size), nrow=test_size)
y <- X[, true_groups]%*%rep(1:5, num_groups)
p = exp(y)/(1+exp(y))
y = rbinom(test_size,1, p)
data.test = list(x=X, y=y)
true_beta = rep(0, expert_num_groups*pj)
true_beta[true_groups] = rep(1:5, num_groups)
# isgl_simple
load("~/Documents/Doctorado/Articulo-iSgL/R/section4-colitis3.RData")
multiplot(p1, p2, cols = 1)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, cols = 1)
# plot ======================================================
c.class <- c(c.gl,c.l,c.sgl, c.isgl)
Method <- c(rep("GL",100),rep("Lasso", 100),rep("SGL",100), rep("iSgL",1))
nonzero <- c(nonzero.gl, nonzero.l, nonzero.sgl, nonzero.isgl)
cutoff <- data.frame(yintercept=c.isgl)
dd <- data.frame(Method = Method, x = nonzero, y = c.class)
p1 = ggplot(data = dd, aes(x = x, y = y, group = Method, shape = Method)) + geom_line(aes(linetype=Method,col=Method)) +
geom_point(aes(col=Method, size=Method))+
scale_y_continuous("CCR (Validation sample)") + scale_x_continuous(expression(num.variables)) +
scale_linetype_manual(values=c("twodash","longdash","dotted","solid")) +
scale_color_manual(values=c("red", "darkgreen", "blue", "orange"))+
scale_size_manual(values = c(1,3,1,1)) +
geom_hline(aes(yintercept=yintercept, linetype="iSgL", color = "iSgL"), data=cutoff, show.legend = F)
library(ggplot2)
# plot ======================================================
c.class <- c(c.gl,c.l,c.sgl, c.isgl)
Method <- c(rep("GL",100),rep("Lasso", 100),rep("SGL",100), rep("iSgL",1))
nonzero <- c(nonzero.gl, nonzero.l, nonzero.sgl, nonzero.isgl)
cutoff <- data.frame(yintercept=c.isgl)
dd <- data.frame(Method = Method, x = nonzero, y = c.class)
p1 = ggplot(data = dd, aes(x = x, y = y, group = Method, shape = Method)) + geom_line(aes(linetype=Method,col=Method)) +
geom_point(aes(col=Method, size=Method))+
scale_y_continuous("CCR (Validation sample)") + scale_x_continuous(expression(num.variables)) +
scale_linetype_manual(values=c("twodash","longdash","dotted","solid")) +
scale_color_manual(values=c("red", "darkgreen", "blue", "orange"))+
scale_size_manual(values = c(1,3,1,1)) +
geom_hline(aes(yintercept=yintercept, linetype="iSgL", color = "iSgL"), data=cutoff, show.legend = F)
# plot ======================================================
c.class <- c(c.gl,c.l,c.sgl, c.isgl)
Method <- c(rep("GL",100),rep("Lasso", 100),rep("SGL",100), rep("iSgL",1))
nonzero <- c(nonzero.gl, nonzero.l, nonzero.sgl, nonzero.isgl)
cutoff <- data.frame(yintercept=c.isgl)
dd <- data.frame(Method = Method, x = nonzero, y = c.class)
p2 = ggplot(data = dd, aes(x = x, y = y, group = Method, shape = Method)) + geom_line(aes(linetype=Method,col=Method)) +
geom_point(aes(col=Method, size=Method))+
scale_y_continuous("CCR (Test sample)") + scale_x_continuous(expression(num.variables)) +
scale_linetype_manual(values=c("twodash","longdash","dotted","solid")) +
scale_color_manual(values=c("red", "darkgreen", "blue", "orange"))+
scale_size_manual(values = c(1,3,1,1)) +
geom_hline(aes(yintercept=yintercept, linetype="iSgL", color = "iSgL"), data=cutoff, show.legend = F)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, cols = 1)
